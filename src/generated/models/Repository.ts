/* tslint:disable */
/* eslint-disable */
/**
 * Codebook Api
 * A simple api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BuildSettingCreatedBy } from './BuildSettingCreatedBy';
import {
    BuildSettingCreatedByFromJSON,
    BuildSettingCreatedByFromJSONTyped,
    BuildSettingCreatedByToJSON,
} from './BuildSettingCreatedBy';

/**
 * 
 * @export
 * @interface Repository
 */
export interface Repository {
    /**
     * 
     * @type {number}
     * @memberof Repository
     */
    readonly id: number;
    /**
     * 
     * @type {Date}
     * @memberof Repository
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {BuildSettingCreatedBy}
     * @memberof Repository
     */
    createdBy: BuildSettingCreatedBy;
    /**
     * 
     * @type {Date}
     * @memberof Repository
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {BuildSettingCreatedBy}
     * @memberof Repository
     */
    updatedBy: BuildSettingCreatedBy;
    /**
     * 
     * @type {string}
     * @memberof Repository
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Repository
     */
    gitUrl?: string;
}

/**
 * Check if a given object implements the Repository interface.
 */
export function instanceOfRepository(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "createdBy" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "updatedBy" in value;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function RepositoryFromJSON(json: any): Repository {
    return RepositoryFromJSONTyped(json, false);
}

export function RepositoryFromJSONTyped(json: any, ignoreDiscriminator: boolean): Repository {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'createdBy': BuildSettingCreatedByFromJSON(json['created_by']),
        'updatedAt': (new Date(json['updated_at'])),
        'updatedBy': BuildSettingCreatedByFromJSON(json['updated_by']),
        'name': json['name'],
        'gitUrl': !exists(json, 'git_url') ? undefined : json['git_url'],
    };
}

export function RepositoryToJSON(value?: Repository | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'created_by': BuildSettingCreatedByToJSON(value.createdBy),
        'updated_by': BuildSettingCreatedByToJSON(value.updatedBy),
        'name': value.name,
        'git_url': value.gitUrl,
    };
}

