/* tslint:disable */
/* eslint-disable */
/**
 * Codebook Api
 * A simple api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Commit
 */
export interface Commit {
    /**
     * 
     * @type {number}
     * @memberof Commit
     */
    readonly id: number;
    /**
     * 
     * @type {string}
     * @memberof Commit
     */
    sha: string;
    /**
     * 
     * @type {string}
     * @memberof Commit
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof Commit
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof Commit
     */
    committerName: string;
    /**
     * 
     * @type {string}
     * @memberof Commit
     */
    committerEmail: string;
    /**
     * 
     * @type {Date}
     * @memberof Commit
     */
    committedAt: Date;
}

/**
 * Check if a given object implements the Commit interface.
 */
export function instanceOfCommit(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "sha" in value;
    isInstance = isInstance && "url" in value;
    isInstance = isInstance && "message" in value;
    isInstance = isInstance && "committerName" in value;
    isInstance = isInstance && "committerEmail" in value;
    isInstance = isInstance && "committedAt" in value;

    return isInstance;
}

export function CommitFromJSON(json: any): Commit {
    return CommitFromJSONTyped(json, false);
}

export function CommitFromJSONTyped(json: any, ignoreDiscriminator: boolean): Commit {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'sha': json['sha'],
        'url': json['url'],
        'message': json['message'],
        'committerName': json['committer_name'],
        'committerEmail': json['committer_email'],
        'committedAt': (new Date(json['committed_at'])),
    };
}

export function CommitToJSON(value?: Commit | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sha': value.sha,
        'url': value.url,
        'message': value.message,
        'committer_name': value.committerName,
        'committer_email': value.committerEmail,
        'committed_at': (value.committedAt.toISOString()),
    };
}

