/* tslint:disable */
/* eslint-disable */
/**
 * Codebook Api
 * A simple api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BuildSettingCreatedBy } from './BuildSettingCreatedBy';
import {
    BuildSettingCreatedByFromJSON,
    BuildSettingCreatedByFromJSONTyped,
    BuildSettingCreatedByToJSON,
} from './BuildSettingCreatedBy';
import type { PipelineCurrent } from './PipelineCurrent';
import {
    PipelineCurrentFromJSON,
    PipelineCurrentFromJSONTyped,
    PipelineCurrentToJSON,
} from './PipelineCurrent';

/**
 * 
 * @export
 * @interface Pipeline
 */
export interface Pipeline {
    /**
     * 
     * @type {number}
     * @memberof Pipeline
     */
    readonly id: number;
    /**
     * 
     * @type {Date}
     * @memberof Pipeline
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {BuildSettingCreatedBy}
     * @memberof Pipeline
     */
    createdBy: BuildSettingCreatedBy;
    /**
     * 
     * @type {Date}
     * @memberof Pipeline
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {BuildSettingCreatedBy}
     * @memberof Pipeline
     */
    updatedBy: BuildSettingCreatedBy;
    /**
     * 
     * @type {PipelineCurrent}
     * @memberof Pipeline
     */
    current: PipelineCurrent;
    /**
     * 
     * @type {string}
     * @memberof Pipeline
     */
    version: string;
    /**
     * 
     * @type {boolean}
     * @memberof Pipeline
     */
    readonly closed: boolean;
}

/**
 * Check if a given object implements the Pipeline interface.
 */
export function instanceOfPipeline(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "createdBy" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "updatedBy" in value;
    isInstance = isInstance && "current" in value;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "closed" in value;

    return isInstance;
}

export function PipelineFromJSON(json: any): Pipeline {
    return PipelineFromJSONTyped(json, false);
}

export function PipelineFromJSONTyped(json: any, ignoreDiscriminator: boolean): Pipeline {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'createdBy': BuildSettingCreatedByFromJSON(json['created_by']),
        'updatedAt': (new Date(json['updated_at'])),
        'updatedBy': BuildSettingCreatedByFromJSON(json['updated_by']),
        'current': PipelineCurrentFromJSON(json['current']),
        'version': json['version'],
        'closed': json['closed'],
    };
}

export function PipelineToJSON(value?: Pipeline | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'created_by': BuildSettingCreatedByToJSON(value.createdBy),
        'updated_by': BuildSettingCreatedByToJSON(value.updatedBy),
        'current': PipelineCurrentToJSON(value.current),
        'version': value.version,
    };
}

