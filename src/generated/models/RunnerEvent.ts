/* tslint:disable */
/* eslint-disable */
/**
 * Codebook Api
 * A simple api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StateEnum } from './StateEnum';
import {
    StateEnumFromJSON,
    StateEnumFromJSONTyped,
    StateEnumToJSON,
} from './StateEnum';

/**
 * 
 * @export
 * @interface RunnerEvent
 */
export interface RunnerEvent {
    /**
     * 
     * @type {number}
     * @memberof RunnerEvent
     */
    readonly id: number;
    /**
     * 
     * @type {number}
     * @memberof RunnerEvent
     */
    task: number;
    /**
     * 
     * @type {string}
     * @memberof RunnerEvent
     */
    host: string;
    /**
     * 
     * @type {string}
     * @memberof RunnerEvent
     */
    remoteAddr?: string | null;
    /**
     * 
     * @type {StateEnum}
     * @memberof RunnerEvent
     */
    state?: StateEnum;
    /**
     * 
     * @type {boolean}
     * @memberof RunnerEvent
     */
    changed?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof RunnerEvent
     */
    playbook: string;
    /**
     * 
     * @type {string}
     * @memberof RunnerEvent
     */
    play: string;
    /**
     * 
     * @type {string}
     * @memberof RunnerEvent
     */
    taskName: string;
    /**
     * 
     * @type {Date}
     * @memberof RunnerEvent
     */
    start?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof RunnerEvent
     */
    end?: Date | null;
    /**
     * 
     * @type {number}
     * @memberof RunnerEvent
     */
    duration?: number;
}

/**
 * Check if a given object implements the RunnerEvent interface.
 */
export function instanceOfRunnerEvent(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "task" in value;
    isInstance = isInstance && "host" in value;
    isInstance = isInstance && "playbook" in value;
    isInstance = isInstance && "play" in value;
    isInstance = isInstance && "taskName" in value;

    return isInstance;
}

export function RunnerEventFromJSON(json: any): RunnerEvent {
    return RunnerEventFromJSONTyped(json, false);
}

export function RunnerEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): RunnerEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'task': json['task'],
        'host': json['host'],
        'remoteAddr': !exists(json, 'remote_addr') ? undefined : json['remote_addr'],
        'state': !exists(json, 'state') ? undefined : StateEnumFromJSON(json['state']),
        'changed': !exists(json, 'changed') ? undefined : json['changed'],
        'playbook': json['playbook'],
        'play': json['play'],
        'taskName': json['task_name'],
        'start': !exists(json, 'start') ? undefined : (json['start'] === null ? null : new Date(json['start'])),
        'end': !exists(json, 'end') ? undefined : (json['end'] === null ? null : new Date(json['end'])),
        'duration': !exists(json, 'duration') ? undefined : json['duration'],
    };
}

export function RunnerEventToJSON(value?: RunnerEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'task': value.task,
        'host': value.host,
        'remote_addr': value.remoteAddr,
        'state': StateEnumToJSON(value.state),
        'changed': value.changed,
        'playbook': value.playbook,
        'play': value.play,
        'task_name': value.taskName,
        'start': value.start === undefined ? undefined : (value.start === null ? null : value.start.toISOString()),
        'end': value.end === undefined ? undefined : (value.end === null ? null : value.end.toISOString()),
        'duration': value.duration,
    };
}

