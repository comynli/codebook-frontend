/* tslint:disable */
/* eslint-disable */
/**
 * Codebook Api
 * A simple api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExecuteRequest,
  PaginatedPeriodicTaskList,
  PaginatedRepositoryList,
  PaginatedRunnerEventList,
  PaginatedTaskSummaryList,
  PeriodicTask,
  PeriodicTaskCreationRequest,
  PeriodicTaskMutationRequest,
  Repository,
  RepositoryMutationRequest,
  RepositoryRequest,
  Task,
} from '../models';
import {
    ExecuteRequestFromJSON,
    ExecuteRequestToJSON,
    PaginatedPeriodicTaskListFromJSON,
    PaginatedPeriodicTaskListToJSON,
    PaginatedRepositoryListFromJSON,
    PaginatedRepositoryListToJSON,
    PaginatedRunnerEventListFromJSON,
    PaginatedRunnerEventListToJSON,
    PaginatedTaskSummaryListFromJSON,
    PaginatedTaskSummaryListToJSON,
    PeriodicTaskFromJSON,
    PeriodicTaskToJSON,
    PeriodicTaskCreationRequestFromJSON,
    PeriodicTaskCreationRequestToJSON,
    PeriodicTaskMutationRequestFromJSON,
    PeriodicTaskMutationRequestToJSON,
    RepositoryFromJSON,
    RepositoryToJSON,
    RepositoryMutationRequestFromJSON,
    RepositoryMutationRequestToJSON,
    RepositoryRequestFromJSON,
    RepositoryRequestToJSON,
    TaskFromJSON,
    TaskToJSON,
} from '../models';

export interface CreatePeriodicTaskRequest {
    periodicTaskCreationRequest: PeriodicTaskCreationRequest;
}

export interface CreateRepositoryRequest {
    repositoryRequest: RepositoryRequest;
}

export interface ExecuteOperationRequest {
    executeRequest: ExecuteRequest;
}

export interface GetPeriodicTaskRequest {
    id: number;
}

export interface GetRepositoryRequest {
    id: number;
}

export interface GetTaskRequest {
    id: number;
}

export interface ListAllEventsRequest {
    host?: string;
    page?: number;
    size?: number;
}

export interface ListPeriodicTasksRequest {
    page?: number;
    size?: number;
}

export interface ListRelatedTasksRequest {
    id: number;
    page?: number;
    size?: number;
}

export interface ListRepositoriesRequest {
    kw?: string;
    page?: number;
    size?: number;
}

export interface ListTaskEventsRequest {
    id: number;
    host?: string;
    page?: number;
    size?: number;
}

export interface ListTasksRequest {
    page?: number;
    size?: number;
}

export interface RemoveRepositoryRequest {
    id: number;
}

export interface UpdatePeriodicTaskRequest {
    id: number;
    periodicTaskMutationRequest?: PeriodicTaskMutationRequest;
}

export interface UpdateRepositoryRequest {
    id: number;
    repositoryMutationRequest?: RepositoryMutationRequest;
}

/**
 * IacApi - interface
 * 
 * @export
 * @interface IacApiInterface
 */
export interface IacApiInterface {
    /**
     * 
     * @param {PeriodicTaskCreationRequest} periodicTaskCreationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IacApiInterface
     */
    createPeriodicTaskRaw(requestParameters: CreatePeriodicTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PeriodicTask>>;

    /**
     */
    createPeriodicTask(requestParameters: CreatePeriodicTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PeriodicTask>;

    /**
     * 
     * @param {RepositoryRequest} repositoryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IacApiInterface
     */
    createRepositoryRaw(requestParameters: CreateRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Repository>>;

    /**
     */
    createRepository(requestParameters: CreateRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Repository>;

    /**
     * 
     * @param {ExecuteRequest} executeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IacApiInterface
     */
    executeRaw(requestParameters: ExecuteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Task>>;

    /**
     */
    execute(requestParameters: ExecuteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Task>;

    /**
     * 
     * @param {number} id A unique integer value identifying this periodic task.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IacApiInterface
     */
    getPeriodicTaskRaw(requestParameters: GetPeriodicTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PeriodicTask>>;

    /**
     */
    getPeriodicTask(requestParameters: GetPeriodicTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PeriodicTask>;

    /**
     * 
     * @param {number} id A unique integer value identifying this repository.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IacApiInterface
     */
    getRepositoryRaw(requestParameters: GetRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Repository>>;

    /**
     */
    getRepository(requestParameters: GetRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Repository>;

    /**
     * 
     * @param {number} id A unique integer value identifying this task.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IacApiInterface
     */
    getTaskRaw(requestParameters: GetTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Task>>;

    /**
     */
    getTask(requestParameters: GetTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Task>;

    /**
     * 
     * @param {string} [host] 
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [size] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IacApiInterface
     */
    listAllEventsRaw(requestParameters: ListAllEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRunnerEventList>>;

    /**
     */
    listAllEvents(requestParameters: ListAllEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRunnerEventList>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [size] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IacApiInterface
     */
    listPeriodicTasksRaw(requestParameters: ListPeriodicTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPeriodicTaskList>>;

    /**
     */
    listPeriodicTasks(requestParameters: ListPeriodicTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPeriodicTaskList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this periodic task.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [size] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IacApiInterface
     */
    listRelatedTasksRaw(requestParameters: ListRelatedTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedTaskSummaryList>>;

    /**
     */
    listRelatedTasks(requestParameters: ListRelatedTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedTaskSummaryList>;

    /**
     * 
     * @param {string} [kw] 
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [size] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IacApiInterface
     */
    listRepositoriesRaw(requestParameters: ListRepositoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRepositoryList>>;

    /**
     */
    listRepositories(requestParameters: ListRepositoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRepositoryList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this task.
     * @param {string} [host] 
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [size] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IacApiInterface
     */
    listTaskEventsRaw(requestParameters: ListTaskEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRunnerEventList>>;

    /**
     */
    listTaskEvents(requestParameters: ListTaskEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRunnerEventList>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [size] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IacApiInterface
     */
    listTasksRaw(requestParameters: ListTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedTaskSummaryList>>;

    /**
     */
    listTasks(requestParameters: ListTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedTaskSummaryList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this repository.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IacApiInterface
     */
    removeRepositoryRaw(requestParameters: RemoveRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    removeRepository(requestParameters: RemoveRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {number} id A unique integer value identifying this periodic task.
     * @param {PeriodicTaskMutationRequest} [periodicTaskMutationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IacApiInterface
     */
    updatePeriodicTaskRaw(requestParameters: UpdatePeriodicTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PeriodicTask>>;

    /**
     */
    updatePeriodicTask(requestParameters: UpdatePeriodicTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PeriodicTask>;

    /**
     * 
     * @param {number} id A unique integer value identifying this repository.
     * @param {RepositoryMutationRequest} [repositoryMutationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IacApiInterface
     */
    updateRepositoryRaw(requestParameters: UpdateRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Repository>>;

    /**
     */
    updateRepository(requestParameters: UpdateRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Repository>;

}

/**
 * 
 */
export class IacApi extends runtime.BaseAPI implements IacApiInterface {

    /**
     */
    async createPeriodicTaskRaw(requestParameters: CreatePeriodicTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PeriodicTask>> {
        if (requestParameters.periodicTaskCreationRequest === null || requestParameters.periodicTaskCreationRequest === undefined) {
            throw new runtime.RequiredError('periodicTaskCreationRequest','Required parameter requestParameters.periodicTaskCreationRequest was null or undefined when calling createPeriodicTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/periodic/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PeriodicTaskCreationRequestToJSON(requestParameters.periodicTaskCreationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PeriodicTaskFromJSON(jsonValue));
    }

    /**
     */
    async createPeriodicTask(requestParameters: CreatePeriodicTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PeriodicTask> {
        const response = await this.createPeriodicTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createRepositoryRaw(requestParameters: CreateRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Repository>> {
        if (requestParameters.repositoryRequest === null || requestParameters.repositoryRequest === undefined) {
            throw new runtime.RequiredError('repositoryRequest','Required parameter requestParameters.repositoryRequest was null or undefined when calling createRepository.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/repository/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RepositoryRequestToJSON(requestParameters.repositoryRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RepositoryFromJSON(jsonValue));
    }

    /**
     */
    async createRepository(requestParameters: CreateRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Repository> {
        const response = await this.createRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async executeRaw(requestParameters: ExecuteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters.executeRequest === null || requestParameters.executeRequest === undefined) {
            throw new runtime.RequiredError('executeRequest','Required parameter requestParameters.executeRequest was null or undefined when calling execute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/task/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExecuteRequestToJSON(requestParameters.executeRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     */
    async execute(requestParameters: ExecuteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Task> {
        const response = await this.executeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPeriodicTaskRaw(requestParameters: GetPeriodicTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PeriodicTask>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPeriodicTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/periodic/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PeriodicTaskFromJSON(jsonValue));
    }

    /**
     */
    async getPeriodicTask(requestParameters: GetPeriodicTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PeriodicTask> {
        const response = await this.getPeriodicTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRepositoryRaw(requestParameters: GetRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Repository>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRepository.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/repository/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RepositoryFromJSON(jsonValue));
    }

    /**
     */
    async getRepository(requestParameters: GetRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Repository> {
        const response = await this.getRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTaskRaw(requestParameters: GetTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/task/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     */
    async getTask(requestParameters: GetTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Task> {
        const response = await this.getTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listAllEventsRaw(requestParameters: ListAllEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRunnerEventList>> {
        const queryParameters: any = {};

        if (requestParameters.host !== undefined) {
            queryParameters['host'] = requestParameters.host;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/task/event/all/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRunnerEventListFromJSON(jsonValue));
    }

    /**
     */
    async listAllEvents(requestParameters: ListAllEventsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRunnerEventList> {
        const response = await this.listAllEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listPeriodicTasksRaw(requestParameters: ListPeriodicTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPeriodicTaskList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/periodic/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPeriodicTaskListFromJSON(jsonValue));
    }

    /**
     */
    async listPeriodicTasks(requestParameters: ListPeriodicTasksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPeriodicTaskList> {
        const response = await this.listPeriodicTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listRelatedTasksRaw(requestParameters: ListRelatedTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedTaskSummaryList>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listRelatedTasks.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/periodic/{id}/tasks/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedTaskSummaryListFromJSON(jsonValue));
    }

    /**
     */
    async listRelatedTasks(requestParameters: ListRelatedTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedTaskSummaryList> {
        const response = await this.listRelatedTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listRepositoriesRaw(requestParameters: ListRepositoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRepositoryList>> {
        const queryParameters: any = {};

        if (requestParameters.kw !== undefined) {
            queryParameters['kw'] = requestParameters.kw;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/repository/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRepositoryListFromJSON(jsonValue));
    }

    /**
     */
    async listRepositories(requestParameters: ListRepositoriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRepositoryList> {
        const response = await this.listRepositoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listTaskEventsRaw(requestParameters: ListTaskEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRunnerEventList>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listTaskEvents.');
        }

        const queryParameters: any = {};

        if (requestParameters.host !== undefined) {
            queryParameters['host'] = requestParameters.host;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/task/{id}/event/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRunnerEventListFromJSON(jsonValue));
    }

    /**
     */
    async listTaskEvents(requestParameters: ListTaskEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRunnerEventList> {
        const response = await this.listTaskEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listTasksRaw(requestParameters: ListTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedTaskSummaryList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/task/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedTaskSummaryListFromJSON(jsonValue));
    }

    /**
     */
    async listTasks(requestParameters: ListTasksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedTaskSummaryList> {
        const response = await this.listTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeRepositoryRaw(requestParameters: RemoveRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeRepository.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/repository/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeRepository(requestParameters: RemoveRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeRepositoryRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updatePeriodicTaskRaw(requestParameters: UpdatePeriodicTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PeriodicTask>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePeriodicTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/periodic/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PeriodicTaskMutationRequestToJSON(requestParameters.periodicTaskMutationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PeriodicTaskFromJSON(jsonValue));
    }

    /**
     */
    async updatePeriodicTask(requestParameters: UpdatePeriodicTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PeriodicTask> {
        const response = await this.updatePeriodicTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateRepositoryRaw(requestParameters: UpdateRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Repository>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRepository.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/repository/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RepositoryMutationRequestToJSON(requestParameters.repositoryMutationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RepositoryFromJSON(jsonValue));
    }

    /**
     */
    async updateRepository(requestParameters: UpdateRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Repository> {
        const response = await this.updateRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
