/* tslint:disable */
/* eslint-disable */
/**
 * Codebook Api
 * A simple api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BuildSetting,
  BuildSettingRequest,
  BuildTask,
  BuildTaskCreationRequest,
  Cluster,
  ClusterMutationRequest,
  ClusterRequest,
  DeployTask,
  DeployTaskCreationRequest,
  DeploymentUnit,
  DeploymentUnitCreationRequest,
  DeploymentUnitMutationRequest,
  LaneRequest,
  PaginatedBuildTaskList,
  PaginatedClusterList,
  PaginatedCommitList,
  PaginatedDeployTaskList,
  PaginatedDeploymentUnitList,
  PaginatedDeploymentUnitSummaryList,
  PaginatedPipelineList,
  PaginatedProjectList,
  PaginatedProjectMemberList,
  PaginatedStageList,
  Pipeline,
  PipelineRequest,
  Project,
  ProjectMember,
  ProjectMemberMutationRequest,
  ProjectMutationRequest,
  ProjectRequest,
  Stage,
  StageRequest,
} from '../models';
import {
    BuildSettingFromJSON,
    BuildSettingToJSON,
    BuildSettingRequestFromJSON,
    BuildSettingRequestToJSON,
    BuildTaskFromJSON,
    BuildTaskToJSON,
    BuildTaskCreationRequestFromJSON,
    BuildTaskCreationRequestToJSON,
    ClusterFromJSON,
    ClusterToJSON,
    ClusterMutationRequestFromJSON,
    ClusterMutationRequestToJSON,
    ClusterRequestFromJSON,
    ClusterRequestToJSON,
    DeployTaskFromJSON,
    DeployTaskToJSON,
    DeployTaskCreationRequestFromJSON,
    DeployTaskCreationRequestToJSON,
    DeploymentUnitFromJSON,
    DeploymentUnitToJSON,
    DeploymentUnitCreationRequestFromJSON,
    DeploymentUnitCreationRequestToJSON,
    DeploymentUnitMutationRequestFromJSON,
    DeploymentUnitMutationRequestToJSON,
    LaneRequestFromJSON,
    LaneRequestToJSON,
    PaginatedBuildTaskListFromJSON,
    PaginatedBuildTaskListToJSON,
    PaginatedClusterListFromJSON,
    PaginatedClusterListToJSON,
    PaginatedCommitListFromJSON,
    PaginatedCommitListToJSON,
    PaginatedDeployTaskListFromJSON,
    PaginatedDeployTaskListToJSON,
    PaginatedDeploymentUnitListFromJSON,
    PaginatedDeploymentUnitListToJSON,
    PaginatedDeploymentUnitSummaryListFromJSON,
    PaginatedDeploymentUnitSummaryListToJSON,
    PaginatedPipelineListFromJSON,
    PaginatedPipelineListToJSON,
    PaginatedProjectListFromJSON,
    PaginatedProjectListToJSON,
    PaginatedProjectMemberListFromJSON,
    PaginatedProjectMemberListToJSON,
    PaginatedStageListFromJSON,
    PaginatedStageListToJSON,
    PipelineFromJSON,
    PipelineToJSON,
    PipelineRequestFromJSON,
    PipelineRequestToJSON,
    ProjectFromJSON,
    ProjectToJSON,
    ProjectMemberFromJSON,
    ProjectMemberToJSON,
    ProjectMemberMutationRequestFromJSON,
    ProjectMemberMutationRequestToJSON,
    ProjectMutationRequestFromJSON,
    ProjectMutationRequestToJSON,
    ProjectRequestFromJSON,
    ProjectRequestToJSON,
    StageFromJSON,
    StageToJSON,
    StageRequestFromJSON,
    StageRequestToJSON,
} from '../models';

export interface AddProjectMembersRequest {
    id: number;
    projectMemberMutationRequest: ProjectMemberMutationRequest;
}

export interface CancelBuildTaskRequest {
    id: number;
    taskId: string;
}

export interface ClosePipelineRequest {
    id: number;
    pipelineId: string;
    unit?: number;
}

export interface CreateBuildTaskRequest {
    id: number;
    buildTaskCreationRequest: BuildTaskCreationRequest;
}

export interface CreateClusterRequest {
    clusterRequest: ClusterRequest;
}

export interface CreateDeployTaskRequest {
    id: number;
    deployTaskCreationRequest: DeployTaskCreationRequest;
}

export interface CreateDeploymentUnitRequest {
    id: number;
    deploymentUnitCreationRequest: DeploymentUnitCreationRequest;
}

export interface CreateLaneRequest {
    id: number;
    laneRequest: LaneRequest;
}

export interface CreateProjectRequest {
    projectRequest: ProjectRequest;
}

export interface CreateStageRequest {
    stageRequest: StageRequest;
}

export interface ExecutePipelineRequest {
    id: number;
    pipelineId: string;
    unit?: number;
}

export interface GetBuildSettingRequest {
    id: number;
}

export interface GetBuildTaskRequest {
    id: number;
    taskId: string;
}

export interface GetClusterRequest {
    id: number;
}

export interface GetDeploymentUnitRequest {
    id: number;
    unitId: string;
}

export interface GetPipelineRequest {
    id: number;
    pipelineId: string;
}

export interface GetPipelineNextActionsRequest {
    id: number;
    pipelineId: string;
    page?: number;
    size?: number;
}

export interface GetProjectRequest {
    id: number;
}

export interface GetProjectMembersRequest {
    id: number;
    page?: number;
    size?: number;
}

export interface GetStageRequest {
    id: number;
}

export interface ListBuildTasksRequest {
    id: number;
    page?: number;
    size?: number;
    state?: Array<ListBuildTasksStateEnum>;
}

export interface ListClustersRequest {
    kw?: string;
    page?: number;
    size?: number;
}

export interface ListDeployTasksRequest {
    id: number;
    unit: number;
    page?: number;
    size?: number;
}

export interface ListDeploymentUnitsRequest {
    id: number;
    page?: number;
    size?: number;
}

export interface ListPipelinesRequest {
    id: number;
    page?: number;
    size?: number;
}

export interface ListProjectCommitsRequest {
    id: number;
    page?: number;
    size?: number;
}

export interface ListProjectsRequest {
    kw?: string;
    page?: number;
    size?: number;
}

export interface ListStagesRequest {
    kw?: string;
    page?: number;
    size?: number;
}

export interface RemoveClusterRequest {
    id: number;
}

export interface RemoveDeploymentUnitRequest {
    id: number;
    unitId: string;
}

export interface RemoveLaneRequest {
    id: number;
    name: string;
}

export interface RemoveProjectRequest {
    id: number;
}

export interface RemoveProjectMembersRequest {
    id: number;
    user: number;
}

export interface RemoveStageRequest {
    id: number;
}

export interface SaveBuildSettingRequest {
    id: number;
    buildSettingRequest: BuildSettingRequest;
}

export interface StartPipelineRequest {
    id: number;
    pipelineRequest: PipelineRequest;
}

export interface UpdateClusterRequest {
    id: number;
    clusterMutationRequest?: ClusterMutationRequest;
}

export interface UpdateDeploymentUnitRequest {
    id: number;
    unitId: string;
    deploymentUnitMutationRequest?: DeploymentUnitMutationRequest;
}

export interface UpdateProjectRequest {
    id: number;
    projectMutationRequest?: ProjectMutationRequest;
}

export interface UpdateStageRequest {
    id: number;
    stageRequest: StageRequest;
}

/**
 * PorterApi - interface
 * 
 * @export
 * @interface PorterApiInterface
 */
export interface PorterApiInterface {
    /**
     * 
     * @param {number} id A unique integer value identifying this project.
     * @param {ProjectMemberMutationRequest} projectMemberMutationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    addProjectMembersRaw(requestParameters: AddProjectMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectMember>>;

    /**
     */
    addProjectMembers(requestParameters: AddProjectMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectMember>;

    /**
     * 
     * @param {number} id A unique integer value identifying this project.
     * @param {string} taskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    cancelBuildTaskRaw(requestParameters: CancelBuildTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildTask>>;

    /**
     */
    cancelBuildTask(requestParameters: CancelBuildTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildTask>;

    /**
     * 
     * @param {number} id A unique integer value identifying this project.
     * @param {string} pipelineId 
     * @param {number} [unit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    closePipelineRaw(requestParameters: ClosePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pipeline>>;

    /**
     */
    closePipeline(requestParameters: ClosePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pipeline>;

    /**
     * 
     * @param {number} id A unique integer value identifying this project.
     * @param {BuildTaskCreationRequest} buildTaskCreationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    createBuildTaskRaw(requestParameters: CreateBuildTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildTask>>;

    /**
     */
    createBuildTask(requestParameters: CreateBuildTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildTask>;

    /**
     * 
     * @param {ClusterRequest} clusterRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    createClusterRaw(requestParameters: CreateClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cluster>>;

    /**
     */
    createCluster(requestParameters: CreateClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cluster>;

    /**
     * 
     * @param {number} id A unique integer value identifying this project.
     * @param {DeployTaskCreationRequest} deployTaskCreationRequest 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    createDeployTaskRaw(requestParameters: CreateDeployTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeployTask>>;

    /**
     */
    createDeployTask(requestParameters: CreateDeployTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeployTask>;

    /**
     * 
     * @param {number} id A unique integer value identifying this project.
     * @param {DeploymentUnitCreationRequest} deploymentUnitCreationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    createDeploymentUnitRaw(requestParameters: CreateDeploymentUnitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeploymentUnit>>;

    /**
     */
    createDeploymentUnit(requestParameters: CreateDeploymentUnitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeploymentUnit>;

    /**
     * 
     * @param {number} id A unique integer value identifying this stage.
     * @param {LaneRequest} laneRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    createLaneRaw(requestParameters: CreateLaneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Stage>>;

    /**
     */
    createLane(requestParameters: CreateLaneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Stage>;

    /**
     * 
     * @param {ProjectRequest} projectRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    createProjectRaw(requestParameters: CreateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>>;

    /**
     */
    createProject(requestParameters: CreateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project>;

    /**
     * 
     * @param {StageRequest} stageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    createStageRaw(requestParameters: CreateStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Stage>>;

    /**
     */
    createStage(requestParameters: CreateStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Stage>;

    /**
     * 
     * @param {number} id A unique integer value identifying this project.
     * @param {string} pipelineId 
     * @param {number} [unit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    executePipelineRaw(requestParameters: ExecutePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pipeline>>;

    /**
     */
    executePipeline(requestParameters: ExecutePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pipeline>;

    /**
     * 
     * @param {number} id A unique integer value identifying this project.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    getBuildSettingRaw(requestParameters: GetBuildSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildSetting>>;

    /**
     */
    getBuildSetting(requestParameters: GetBuildSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildSetting>;

    /**
     * 
     * @param {number} id A unique integer value identifying this project.
     * @param {string} taskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    getBuildTaskRaw(requestParameters: GetBuildTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildTask>>;

    /**
     */
    getBuildTask(requestParameters: GetBuildTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildTask>;

    /**
     * 
     * @param {number} id A unique integer value identifying this cluster.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    getClusterRaw(requestParameters: GetClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cluster>>;

    /**
     */
    getCluster(requestParameters: GetClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cluster>;

    /**
     * 
     * @param {number} id A unique integer value identifying this project.
     * @param {string} unitId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    getDeploymentUnitRaw(requestParameters: GetDeploymentUnitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeploymentUnit>>;

    /**
     */
    getDeploymentUnit(requestParameters: GetDeploymentUnitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeploymentUnit>;

    /**
     * 
     * @param {number} id A unique integer value identifying this project.
     * @param {string} pipelineId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    getPipelineRaw(requestParameters: GetPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pipeline>>;

    /**
     */
    getPipeline(requestParameters: GetPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pipeline>;

    /**
     * 
     * @param {number} id A unique integer value identifying this project.
     * @param {string} pipelineId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [size] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    getPipelineNextActionsRaw(requestParameters: GetPipelineNextActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedDeploymentUnitSummaryList>>;

    /**
     */
    getPipelineNextActions(requestParameters: GetPipelineNextActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedDeploymentUnitSummaryList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this project.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    getProjectRaw(requestParameters: GetProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>>;

    /**
     */
    getProject(requestParameters: GetProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project>;

    /**
     * 
     * @param {number} id A unique integer value identifying this project.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [size] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    getProjectMembersRaw(requestParameters: GetProjectMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProjectMemberList>>;

    /**
     */
    getProjectMembers(requestParameters: GetProjectMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProjectMemberList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this stage.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    getStageRaw(requestParameters: GetStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Stage>>;

    /**
     */
    getStage(requestParameters: GetStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Stage>;

    /**
     * 
     * @param {number} id A unique integer value identifying this project.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [size] Number of results to return per page.
     * @param {Array<0 | 1 | 2 | 3 | 4 | 5 | 6>} [state] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    listBuildTasksRaw(requestParameters: ListBuildTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedBuildTaskList>>;

    /**
     */
    listBuildTasks(requestParameters: ListBuildTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedBuildTaskList>;

    /**
     * 
     * @param {string} [kw] 
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [size] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    listClustersRaw(requestParameters: ListClustersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedClusterList>>;

    /**
     */
    listClusters(requestParameters: ListClustersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedClusterList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this project.
     * @param {number} unit 
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [size] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    listDeployTasksRaw(requestParameters: ListDeployTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedDeployTaskList>>;

    /**
     */
    listDeployTasks(requestParameters: ListDeployTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedDeployTaskList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this project.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [size] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    listDeploymentUnitsRaw(requestParameters: ListDeploymentUnitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedDeploymentUnitList>>;

    /**
     */
    listDeploymentUnits(requestParameters: ListDeploymentUnitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedDeploymentUnitList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this project.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [size] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    listPipelinesRaw(requestParameters: ListPipelinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPipelineList>>;

    /**
     */
    listPipelines(requestParameters: ListPipelinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPipelineList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this project.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [size] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    listProjectCommitsRaw(requestParameters: ListProjectCommitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedCommitList>>;

    /**
     */
    listProjectCommits(requestParameters: ListProjectCommitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedCommitList>;

    /**
     * 
     * @param {string} [kw] 
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [size] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    listProjectsRaw(requestParameters: ListProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProjectList>>;

    /**
     */
    listProjects(requestParameters: ListProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProjectList>;

    /**
     * 
     * @param {string} [kw] 
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [size] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    listStagesRaw(requestParameters: ListStagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedStageList>>;

    /**
     */
    listStages(requestParameters: ListStagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedStageList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this cluster.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    removeClusterRaw(requestParameters: RemoveClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    removeCluster(requestParameters: RemoveClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {number} id A unique integer value identifying this project.
     * @param {string} unitId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    removeDeploymentUnitRaw(requestParameters: RemoveDeploymentUnitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    removeDeploymentUnit(requestParameters: RemoveDeploymentUnitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {number} id A unique integer value identifying this stage.
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    removeLaneRaw(requestParameters: RemoveLaneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Stage>>;

    /**
     */
    removeLane(requestParameters: RemoveLaneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Stage>;

    /**
     * 
     * @param {number} id A unique integer value identifying this project.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    removeProjectRaw(requestParameters: RemoveProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    removeProject(requestParameters: RemoveProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {number} id A unique integer value identifying this project.
     * @param {number} user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    removeProjectMembersRaw(requestParameters: RemoveProjectMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    removeProjectMembers(requestParameters: RemoveProjectMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {number} id A unique integer value identifying this stage.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    removeStageRaw(requestParameters: RemoveStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    removeStage(requestParameters: RemoveStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {number} id A unique integer value identifying this project.
     * @param {BuildSettingRequest} buildSettingRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    saveBuildSettingRaw(requestParameters: SaveBuildSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildSetting>>;

    /**
     */
    saveBuildSetting(requestParameters: SaveBuildSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildSetting>;

    /**
     * 
     * @param {number} id A unique integer value identifying this project.
     * @param {PipelineRequest} pipelineRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    startPipelineRaw(requestParameters: StartPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pipeline>>;

    /**
     */
    startPipeline(requestParameters: StartPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pipeline>;

    /**
     * 
     * @param {number} id A unique integer value identifying this cluster.
     * @param {ClusterMutationRequest} [clusterMutationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    updateClusterRaw(requestParameters: UpdateClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cluster>>;

    /**
     */
    updateCluster(requestParameters: UpdateClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cluster>;

    /**
     * 
     * @param {number} id A unique integer value identifying this project.
     * @param {string} unitId 
     * @param {DeploymentUnitMutationRequest} [deploymentUnitMutationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    updateDeploymentUnitRaw(requestParameters: UpdateDeploymentUnitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeploymentUnit>>;

    /**
     */
    updateDeploymentUnit(requestParameters: UpdateDeploymentUnitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeploymentUnit>;

    /**
     * 
     * @param {number} id A unique integer value identifying this project.
     * @param {ProjectMutationRequest} [projectMutationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    updateProjectRaw(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>>;

    /**
     */
    updateProject(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project>;

    /**
     * 
     * @param {number} id A unique integer value identifying this stage.
     * @param {StageRequest} stageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PorterApiInterface
     */
    updateStageRaw(requestParameters: UpdateStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Stage>>;

    /**
     */
    updateStage(requestParameters: UpdateStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Stage>;

}

/**
 * 
 */
export class PorterApi extends runtime.BaseAPI implements PorterApiInterface {

    /**
     */
    async addProjectMembersRaw(requestParameters: AddProjectMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectMember>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addProjectMembers.');
        }

        if (requestParameters.projectMemberMutationRequest === null || requestParameters.projectMemberMutationRequest === undefined) {
            throw new runtime.RequiredError('projectMemberMutationRequest','Required parameter requestParameters.projectMemberMutationRequest was null or undefined when calling addProjectMembers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/{id}/members/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectMemberMutationRequestToJSON(requestParameters.projectMemberMutationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectMemberFromJSON(jsonValue));
    }

    /**
     */
    async addProjectMembers(requestParameters: AddProjectMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectMember> {
        const response = await this.addProjectMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async cancelBuildTaskRaw(requestParameters: CancelBuildTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildTask>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling cancelBuildTask.');
        }

        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling cancelBuildTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/{id}/build/task/{task_id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildTaskFromJSON(jsonValue));
    }

    /**
     */
    async cancelBuildTask(requestParameters: CancelBuildTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildTask> {
        const response = await this.cancelBuildTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async closePipelineRaw(requestParameters: ClosePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pipeline>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling closePipeline.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling closePipeline.');
        }

        const queryParameters: any = {};

        if (requestParameters.unit !== undefined) {
            queryParameters['unit'] = requestParameters.unit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/{id}/pipeline/{pipeline_id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"pipeline_id"}}`, encodeURIComponent(String(requestParameters.pipelineId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineFromJSON(jsonValue));
    }

    /**
     */
    async closePipeline(requestParameters: ClosePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pipeline> {
        const response = await this.closePipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createBuildTaskRaw(requestParameters: CreateBuildTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildTask>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling createBuildTask.');
        }

        if (requestParameters.buildTaskCreationRequest === null || requestParameters.buildTaskCreationRequest === undefined) {
            throw new runtime.RequiredError('buildTaskCreationRequest','Required parameter requestParameters.buildTaskCreationRequest was null or undefined when calling createBuildTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/{id}/build/task/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BuildTaskCreationRequestToJSON(requestParameters.buildTaskCreationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildTaskFromJSON(jsonValue));
    }

    /**
     */
    async createBuildTask(requestParameters: CreateBuildTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildTask> {
        const response = await this.createBuildTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createClusterRaw(requestParameters: CreateClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cluster>> {
        if (requestParameters.clusterRequest === null || requestParameters.clusterRequest === undefined) {
            throw new runtime.RequiredError('clusterRequest','Required parameter requestParameters.clusterRequest was null or undefined when calling createCluster.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/cluster/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClusterRequestToJSON(requestParameters.clusterRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClusterFromJSON(jsonValue));
    }

    /**
     */
    async createCluster(requestParameters: CreateClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cluster> {
        const response = await this.createClusterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createDeployTaskRaw(requestParameters: CreateDeployTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeployTask>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling createDeployTask.');
        }

        if (requestParameters.deployTaskCreationRequest === null || requestParameters.deployTaskCreationRequest === undefined) {
            throw new runtime.RequiredError('deployTaskCreationRequest','Required parameter requestParameters.deployTaskCreationRequest was null or undefined when calling createDeployTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/{id}/deploy/task/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeployTaskCreationRequestToJSON(requestParameters.deployTaskCreationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeployTaskFromJSON(jsonValue));
    }

    /**
     */
    async createDeployTask(requestParameters: CreateDeployTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeployTask> {
        const response = await this.createDeployTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createDeploymentUnitRaw(requestParameters: CreateDeploymentUnitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeploymentUnit>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling createDeploymentUnit.');
        }

        if (requestParameters.deploymentUnitCreationRequest === null || requestParameters.deploymentUnitCreationRequest === undefined) {
            throw new runtime.RequiredError('deploymentUnitCreationRequest','Required parameter requestParameters.deploymentUnitCreationRequest was null or undefined when calling createDeploymentUnit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/{id}/deployment/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeploymentUnitCreationRequestToJSON(requestParameters.deploymentUnitCreationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeploymentUnitFromJSON(jsonValue));
    }

    /**
     */
    async createDeploymentUnit(requestParameters: CreateDeploymentUnitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeploymentUnit> {
        const response = await this.createDeploymentUnitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createLaneRaw(requestParameters: CreateLaneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Stage>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling createLane.');
        }

        if (requestParameters.laneRequest === null || requestParameters.laneRequest === undefined) {
            throw new runtime.RequiredError('laneRequest','Required parameter requestParameters.laneRequest was null or undefined when calling createLane.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/stage/{id}/lane/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LaneRequestToJSON(requestParameters.laneRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageFromJSON(jsonValue));
    }

    /**
     */
    async createLane(requestParameters: CreateLaneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Stage> {
        const response = await this.createLaneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createProjectRaw(requestParameters: CreateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters.projectRequest === null || requestParameters.projectRequest === undefined) {
            throw new runtime.RequiredError('projectRequest','Required parameter requestParameters.projectRequest was null or undefined when calling createProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectRequestToJSON(requestParameters.projectRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     */
    async createProject(requestParameters: CreateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.createProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createStageRaw(requestParameters: CreateStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Stage>> {
        if (requestParameters.stageRequest === null || requestParameters.stageRequest === undefined) {
            throw new runtime.RequiredError('stageRequest','Required parameter requestParameters.stageRequest was null or undefined when calling createStage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/stage/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StageRequestToJSON(requestParameters.stageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageFromJSON(jsonValue));
    }

    /**
     */
    async createStage(requestParameters: CreateStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Stage> {
        const response = await this.createStageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async executePipelineRaw(requestParameters: ExecutePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pipeline>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling executePipeline.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling executePipeline.');
        }

        const queryParameters: any = {};

        if (requestParameters.unit !== undefined) {
            queryParameters['unit'] = requestParameters.unit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/{id}/pipeline/{pipeline_id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"pipeline_id"}}`, encodeURIComponent(String(requestParameters.pipelineId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineFromJSON(jsonValue));
    }

    /**
     */
    async executePipeline(requestParameters: ExecutePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pipeline> {
        const response = await this.executePipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getBuildSettingRaw(requestParameters: GetBuildSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildSetting>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBuildSetting.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/{id}/build/setting/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildSettingFromJSON(jsonValue));
    }

    /**
     */
    async getBuildSetting(requestParameters: GetBuildSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildSetting> {
        const response = await this.getBuildSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getBuildTaskRaw(requestParameters: GetBuildTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildTask>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBuildTask.');
        }

        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling getBuildTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/{id}/build/task/{task_id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildTaskFromJSON(jsonValue));
    }

    /**
     */
    async getBuildTask(requestParameters: GetBuildTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildTask> {
        const response = await this.getBuildTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getClusterRaw(requestParameters: GetClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cluster>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCluster.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/cluster/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClusterFromJSON(jsonValue));
    }

    /**
     */
    async getCluster(requestParameters: GetClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cluster> {
        const response = await this.getClusterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDeploymentUnitRaw(requestParameters: GetDeploymentUnitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeploymentUnit>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDeploymentUnit.');
        }

        if (requestParameters.unitId === null || requestParameters.unitId === undefined) {
            throw new runtime.RequiredError('unitId','Required parameter requestParameters.unitId was null or undefined when calling getDeploymentUnit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/{id}/deployment/{unit_id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"unit_id"}}`, encodeURIComponent(String(requestParameters.unitId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeploymentUnitFromJSON(jsonValue));
    }

    /**
     */
    async getDeploymentUnit(requestParameters: GetDeploymentUnitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeploymentUnit> {
        const response = await this.getDeploymentUnitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPipelineRaw(requestParameters: GetPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pipeline>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPipeline.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling getPipeline.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/{id}/pipeline/{pipeline_id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"pipeline_id"}}`, encodeURIComponent(String(requestParameters.pipelineId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineFromJSON(jsonValue));
    }

    /**
     */
    async getPipeline(requestParameters: GetPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pipeline> {
        const response = await this.getPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPipelineNextActionsRaw(requestParameters: GetPipelineNextActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedDeploymentUnitSummaryList>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPipelineNextActions.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling getPipelineNextActions.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/{id}/pipeline/{pipeline_id}/actions/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"pipeline_id"}}`, encodeURIComponent(String(requestParameters.pipelineId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedDeploymentUnitSummaryListFromJSON(jsonValue));
    }

    /**
     */
    async getPipelineNextActions(requestParameters: GetPipelineNextActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedDeploymentUnitSummaryList> {
        const response = await this.getPipelineNextActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getProjectRaw(requestParameters: GetProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     */
    async getProject(requestParameters: GetProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.getProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getProjectMembersRaw(requestParameters: GetProjectMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProjectMemberList>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProjectMembers.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/{id}/members/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProjectMemberListFromJSON(jsonValue));
    }

    /**
     */
    async getProjectMembers(requestParameters: GetProjectMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProjectMemberList> {
        const response = await this.getProjectMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getStageRaw(requestParameters: GetStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Stage>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/stage/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageFromJSON(jsonValue));
    }

    /**
     */
    async getStage(requestParameters: GetStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Stage> {
        const response = await this.getStageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listBuildTasksRaw(requestParameters: ListBuildTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedBuildTaskList>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listBuildTasks.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.state) {
            queryParameters['state'] = requestParameters.state;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/{id}/build/task/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedBuildTaskListFromJSON(jsonValue));
    }

    /**
     */
    async listBuildTasks(requestParameters: ListBuildTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedBuildTaskList> {
        const response = await this.listBuildTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listClustersRaw(requestParameters: ListClustersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedClusterList>> {
        const queryParameters: any = {};

        if (requestParameters.kw !== undefined) {
            queryParameters['kw'] = requestParameters.kw;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/cluster/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedClusterListFromJSON(jsonValue));
    }

    /**
     */
    async listClusters(requestParameters: ListClustersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedClusterList> {
        const response = await this.listClustersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listDeployTasksRaw(requestParameters: ListDeployTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedDeployTaskList>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listDeployTasks.');
        }

        if (requestParameters.unit === null || requestParameters.unit === undefined) {
            throw new runtime.RequiredError('unit','Required parameter requestParameters.unit was null or undefined when calling listDeployTasks.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.unit !== undefined) {
            queryParameters['unit'] = requestParameters.unit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/{id}/deploy/task/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedDeployTaskListFromJSON(jsonValue));
    }

    /**
     */
    async listDeployTasks(requestParameters: ListDeployTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedDeployTaskList> {
        const response = await this.listDeployTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listDeploymentUnitsRaw(requestParameters: ListDeploymentUnitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedDeploymentUnitList>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listDeploymentUnits.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/{id}/deployment/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedDeploymentUnitListFromJSON(jsonValue));
    }

    /**
     */
    async listDeploymentUnits(requestParameters: ListDeploymentUnitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedDeploymentUnitList> {
        const response = await this.listDeploymentUnitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listPipelinesRaw(requestParameters: ListPipelinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPipelineList>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listPipelines.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/{id}/pipeline/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPipelineListFromJSON(jsonValue));
    }

    /**
     */
    async listPipelines(requestParameters: ListPipelinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPipelineList> {
        const response = await this.listPipelinesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listProjectCommitsRaw(requestParameters: ListProjectCommitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedCommitList>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listProjectCommits.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/{id}/commit/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedCommitListFromJSON(jsonValue));
    }

    /**
     */
    async listProjectCommits(requestParameters: ListProjectCommitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedCommitList> {
        const response = await this.listProjectCommitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listProjectsRaw(requestParameters: ListProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProjectList>> {
        const queryParameters: any = {};

        if (requestParameters.kw !== undefined) {
            queryParameters['kw'] = requestParameters.kw;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProjectListFromJSON(jsonValue));
    }

    /**
     */
    async listProjects(requestParameters: ListProjectsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProjectList> {
        const response = await this.listProjectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listStagesRaw(requestParameters: ListStagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedStageList>> {
        const queryParameters: any = {};

        if (requestParameters.kw !== undefined) {
            queryParameters['kw'] = requestParameters.kw;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/stage/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedStageListFromJSON(jsonValue));
    }

    /**
     */
    async listStages(requestParameters: ListStagesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedStageList> {
        const response = await this.listStagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeClusterRaw(requestParameters: RemoveClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeCluster.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/cluster/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeCluster(requestParameters: RemoveClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeClusterRaw(requestParameters, initOverrides);
    }

    /**
     */
    async removeDeploymentUnitRaw(requestParameters: RemoveDeploymentUnitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeDeploymentUnit.');
        }

        if (requestParameters.unitId === null || requestParameters.unitId === undefined) {
            throw new runtime.RequiredError('unitId','Required parameter requestParameters.unitId was null or undefined when calling removeDeploymentUnit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/{id}/deployment/{unit_id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"unit_id"}}`, encodeURIComponent(String(requestParameters.unitId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeDeploymentUnit(requestParameters: RemoveDeploymentUnitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeDeploymentUnitRaw(requestParameters, initOverrides);
    }

    /**
     */
    async removeLaneRaw(requestParameters: RemoveLaneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Stage>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeLane.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling removeLane.');
        }

        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/stage/{id}/lane/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageFromJSON(jsonValue));
    }

    /**
     */
    async removeLane(requestParameters: RemoveLaneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Stage> {
        const response = await this.removeLaneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeProjectRaw(requestParameters: RemoveProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeProject(requestParameters: RemoveProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeProjectRaw(requestParameters, initOverrides);
    }

    /**
     */
    async removeProjectMembersRaw(requestParameters: RemoveProjectMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeProjectMembers.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling removeProjectMembers.');
        }

        const queryParameters: any = {};

        if (requestParameters.user !== undefined) {
            queryParameters['user'] = requestParameters.user;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/{id}/members/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeProjectMembers(requestParameters: RemoveProjectMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeProjectMembersRaw(requestParameters, initOverrides);
    }

    /**
     */
    async removeStageRaw(requestParameters: RemoveStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeStage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/stage/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeStage(requestParameters: RemoveStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeStageRaw(requestParameters, initOverrides);
    }

    /**
     */
    async saveBuildSettingRaw(requestParameters: SaveBuildSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildSetting>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling saveBuildSetting.');
        }

        if (requestParameters.buildSettingRequest === null || requestParameters.buildSettingRequest === undefined) {
            throw new runtime.RequiredError('buildSettingRequest','Required parameter requestParameters.buildSettingRequest was null or undefined when calling saveBuildSetting.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/{id}/build/setting/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BuildSettingRequestToJSON(requestParameters.buildSettingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildSettingFromJSON(jsonValue));
    }

    /**
     */
    async saveBuildSetting(requestParameters: SaveBuildSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildSetting> {
        const response = await this.saveBuildSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async startPipelineRaw(requestParameters: StartPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pipeline>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling startPipeline.');
        }

        if (requestParameters.pipelineRequest === null || requestParameters.pipelineRequest === undefined) {
            throw new runtime.RequiredError('pipelineRequest','Required parameter requestParameters.pipelineRequest was null or undefined when calling startPipeline.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/{id}/pipeline/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PipelineRequestToJSON(requestParameters.pipelineRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineFromJSON(jsonValue));
    }

    /**
     */
    async startPipeline(requestParameters: StartPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pipeline> {
        const response = await this.startPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateClusterRaw(requestParameters: UpdateClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cluster>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCluster.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/cluster/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ClusterMutationRequestToJSON(requestParameters.clusterMutationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClusterFromJSON(jsonValue));
    }

    /**
     */
    async updateCluster(requestParameters: UpdateClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cluster> {
        const response = await this.updateClusterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateDeploymentUnitRaw(requestParameters: UpdateDeploymentUnitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeploymentUnit>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDeploymentUnit.');
        }

        if (requestParameters.unitId === null || requestParameters.unitId === undefined) {
            throw new runtime.RequiredError('unitId','Required parameter requestParameters.unitId was null or undefined when calling updateDeploymentUnit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/{id}/deployment/{unit_id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"unit_id"}}`, encodeURIComponent(String(requestParameters.unitId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DeploymentUnitMutationRequestToJSON(requestParameters.deploymentUnitMutationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeploymentUnitFromJSON(jsonValue));
    }

    /**
     */
    async updateDeploymentUnit(requestParameters: UpdateDeploymentUnitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeploymentUnit> {
        const response = await this.updateDeploymentUnitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateProjectRaw(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/project/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectMutationRequestToJSON(requestParameters.projectMutationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     */
    async updateProject(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.updateProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateStageRaw(requestParameters: UpdateStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Stage>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateStage.');
        }

        if (requestParameters.stageRequest === null || requestParameters.stageRequest === undefined) {
            throw new runtime.RequiredError('stageRequest','Required parameter requestParameters.stageRequest was null or undefined when calling updateStage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/porter/stage/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StageRequestToJSON(requestParameters.stageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageFromJSON(jsonValue));
    }

    /**
     */
    async updateStage(requestParameters: UpdateStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Stage> {
        const response = await this.updateStageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListBuildTasksStateEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6
} as const;
export type ListBuildTasksStateEnum = typeof ListBuildTasksStateEnum[keyof typeof ListBuildTasksStateEnum];
